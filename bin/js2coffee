#!/usr/bin/env ruby
# -*- coding: utf-8 -*-

require 'js2coffee'
require 'coderay'
require 'optparse'

if File.pipe?($stdin)
  content = Js2coffee.compile($stdin.read).to_s
  unless content.empty?
    token = CodeRay.scan(content, :js)
    print $stdout.tty? ? token.terminal : token.text
  end
  exit
end

if ARGV.empty?
  Js2coffee.send_notify('Starting coffee2js compiler')
  puts "Watching directory \`\033[0;33m#{Dir.pwd}\033[0m' ..."
  Js2coffee.watch!
  exit
end

options  = {}

opt = ARGV.options do |opts|
  opts.banner = "compile js to coffee, vice versa.\n\n"

  opts.on('-e', "--eval 'script'", 'compile inline javascript to coffee, pretty print to terminal.') do |js|
    options['eval'] = js
  end
  opts.on('-r', '--reverse', 'reverse, compile coffee to js.') do
    $reverse = true
  end
  opts.on_tail('-v', '--version', 'print version information') do
    puts Js2coffee::VERSION.to_s
    exit
  end

  opts.on_head("    #{File.basename($0)} path/to/<script_file>, pretty print to terminal, can be redirect to file.")
  opts.on_head("    #{File.basename($0)} path/to/<script_directory>, Watching script changed/created in directory.")
end

begin
  filename = opt.parse!
rescue OptionParser::InvalidOption, OptionParser::MissingArgument
  puts $!
  opt.abort(opt.help)
end

if filename.empty?
  # active --eval
  content = Js2coffee.compile(options['eval']).to_s
  print CodeRay.scan(content, :js).terminal unless content.empty?
else
  # no options, only files/directory as args
  dir = filename.first
  if test 'd', dir
    Dir.chdir(dir) do
      Js2coffee.send_notify('Starting coffee2js compiler')
      puts "Watching directory \`\033[0;33m#{dir}\033[0m' ..."
      Js2coffee.watch!
    end
  else
    ARGV.each do |file|
      unless File.exist? file
        puts "cannot open \`\033[0;33m#{file}\033[0m' for reading: No such file or directory, Skipping"
        next
      end

      content = Js2coffee.compile(file).to_s
      unless content.empty?
        token = CodeRay.scan(content, :js)
        print $stdout.tty? ? token.terminal : token.text
      end
    end
  end
end
